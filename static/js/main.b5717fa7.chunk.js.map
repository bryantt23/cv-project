{"version":3,"sources":["components/EditableLabel.js","components/PersonalInfo.js","components/Job.js","components/WorkExperience.js","components/School.js","components/SchoolExperience.js","App.js","index.js"],"names":["EditableLabel","props","state","text","value","editing","initEditor","edit","bind","save","cancel","handleChange","e","this","setState","target","editor","labelName","type","defaultValue","onChange","onKeyPress","event","which","keyCode","autoFocus","onClick","changeHandler","keyName","Component","PersonalInfo","name","city","Job","message","addNewJob","companyName","title","location","WorkExperience","newJob","newArray","experience","arrayName","editingJob","editJob","len","length","deleteFromArray","key","console","log","index","arrayCopy","splice","experienceArr","i","job","push","experienceType","showAddExperienceForm","School","courseOfStudy","SchoolExperience","appState","schoolExperience","workExperience","App","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5717fa7.chunk.js","sourcesContent":["// https://stackoverflow.com/questions/29303456/reactjs-onclick-change-elementhttps://stackoverflow.com/questions/29303456/reactjs-onclick-change-element\r\nimport React, { Component } from 'react';\r\n\r\nclass EditableLabel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: props.value,\r\n      editing: false\r\n    };\r\n    this.initEditor();\r\n    this.edit = this.edit.bind(this);\r\n    this.save = this.save.bind(this);\r\n    this.cancel = this.cancel.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ text: e.target.value });\r\n  }\r\n\r\n  cancel() {\r\n    this.setState({\r\n      editing: false,\r\n      text: this.props.value\r\n    });\r\n  }\r\n\r\n  initEditor() {\r\n    this.editor = (\r\n      <div>\r\n        {this.props.labelName}:{' '}\r\n        <input\r\n          type='text'\r\n          defaultValue={this.state.text}\r\n          onChange={e => this.handleChange(e)}\r\n          onKeyPress={event => {\r\n            const key = event.which || event.keyCode;\r\n            if (key === 13) {\r\n              //enter key\r\n              this.save(event.target.value);\r\n            }\r\n          }}\r\n          autoFocus={true}\r\n        />\r\n        <button onClick={() => this.save(this.state.text)}>Save Changes</button>{' '}\r\n        <button onClick={() => this.cancel()}>Cancel</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  edit() {\r\n    this.setState({\r\n      text: this.state.text,\r\n      editing: true\r\n    });\r\n  }\r\n\r\n  save(value) {\r\n    this.setState({\r\n      text: value,\r\n      editing: false\r\n    });\r\n    this.props.changeHandler(this.props.keyName, value);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.initEditor();\r\n  }\r\n\r\n  render() {\r\n    return this.state.editing ? (\r\n      this.editor\r\n    ) : (\r\n      <p onClick={this.edit}>\r\n        {this.props.labelName}: {this.state.text}\r\n        <button>Edit</button>\r\n      </p>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditableLabel;\r\n//and use it like <EditableLabel value={\"any external value\"}/>;\r\n","import React, { Component } from 'react';\r\nimport EditableLabel from './EditableLabel';\r\n\r\nclass PersonalInfo extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Personal Info</h3>\r\n        <EditableLabel\r\n          value={this.props.name}\r\n          changeHandler={this.props.changeHandler}\r\n          keyName='name'\r\n          labelName='Name'\r\n        />\r\n        <EditableLabel\r\n          value={this.props.city}\r\n          changeHandler={this.props.changeHandler}\r\n          keyName='city'\r\n          labelName='City'\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PersonalInfo;\r\n","import React, { Component } from 'react';\r\nimport EditableLabel from './EditableLabel';\r\n\r\nclass Job extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>{this.props.message}</h3>\r\n        <button onClick={() => this.props.addNewJob()}>\r\n          {this.props.message}\r\n        </button>\r\n        <EditableLabel\r\n          value={this.props.companyName}\r\n          changeHandler={this.props.changeHandler('companyName')}\r\n          keyName='companyName'\r\n          labelName='Company Name'\r\n        />\r\n        <EditableLabel\r\n          value={this.props.title}\r\n          changeHandler={this.props.changeHandler('title')}\r\n          keyName='title'\r\n          labelName='Title'\r\n        />\r\n        <EditableLabel\r\n          value={this.props.location}\r\n          changeHandler={this.props.changeHandler('location')}\r\n          keyName='location'\r\n          labelName='Location'\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Job;\r\n","import React, { Component } from 'react';\r\nimport Job from './Job';\r\n\r\nclass WorkExperience extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      addNewJob: false,\r\n      companyName: 'Add Company Name Here',\r\n      title: 'Add Job Title Here',\r\n      location: 'Add Location Here',\r\n      editingJob: false\r\n    };\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n  }\r\n\r\n  changeHandler(key, value) {\r\n    this.setState({ [key]: value }, () => console.log(this.state));\r\n  }\r\n\r\n  deleteFromArray(index) {\r\n    let arrayCopy = [...this.props.experience];\r\n    arrayCopy.splice(index, 1);\r\n    this.props.changeHandler(this.props.arrayName, arrayCopy);\r\n  }\r\n\r\n  showAddExperienceForm() {\r\n    this.setState({ addNewJob: true });\r\n  }\r\n\r\n  addNewJob = () => {\r\n    const { title, companyName, location } = this.state;\r\n    const newJob = { title, companyName, location };\r\n    const newArray = [...this.props.experience, newJob];\r\n    this.props.changeHandler(this.props.arrayName, newArray);\r\n    this.setState({ editingJob: false });\r\n  };\r\n\r\n  //for edit put last element into state, delete last element, & then call addNewJob\r\n  editJob = () => {\r\n    const experience = this.props.experience;\r\n    const len = experience.length;\r\n    const { title, companyName, location } = experience[len - 1];\r\n    this.setState({ title, companyName, location });\r\n    this.deleteFromArray(len - 1);\r\n    this.setState({ editingJob: true, addNewJob: true });\r\n  };\r\n\r\n  render() {\r\n    const len = this.props.experience.length;\r\n    const experienceArr = [];\r\n    for (let i = 0; i < len; i++) {\r\n      let job = this.props.experience[i];\r\n      if (i === len - 1) {\r\n        experienceArr.push(\r\n          <p key={i}>\r\n            Company Name: {job.companyName}, Title: {job.title}, Location:{' '}\r\n            {job.location} <button onClick={() => this.editJob()}>Edit</button>\r\n          </p>\r\n        );\r\n      } else {\r\n        experienceArr.push(\r\n          <p key={i}>\r\n            Company Name: {job.companyName}, Title: {job.title}, Location:{' '}\r\n            {job.location}{' '}\r\n            <button onClick={() => this.deleteFromArray(i)}>Delete</button>\r\n          </p>\r\n        );\r\n      }\r\n    }\r\n\r\n    const experienceType = this.props.experienceType;\r\n    const { companyName, title, location } = this.state;\r\n    const message = this.state.editingJob\r\n      ? `Edit ${experienceType}`\r\n      : `Add ${experienceType}`;\r\n    return (\r\n      <div>\r\n        <h3>{experienceType} Experience</h3>\r\n        {this.state.addNewJob && (\r\n          <button onClick={() => this.setState({ addNewJob: false })}>\r\n            Show {experienceType}\r\n          </button>\r\n        )}\r\n        {!this.state.addNewJob && (\r\n          <button onClick={() => this.showAddExperienceForm()}>\r\n            Add {experienceType} Experience\r\n          </button>\r\n        )}\r\n        {!this.state.addNewJob && experienceArr}\r\n        {this.state.addNewJob ? (\r\n          <Job\r\n            companyName={companyName}\r\n            title={title}\r\n            location={location}\r\n            changeHandler={() => this.changeHandler}\r\n            addNewJob={() => this.addNewJob()}\r\n            message={message}\r\n          />\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkExperience;\r\n","import React, { Component } from 'react';\r\nimport EditableLabel from './EditableLabel';\r\n\r\nclass School extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>{this.props.message}</h3>\r\n        <button onClick={() => this.props.addNewJob()}>\r\n          {this.props.message}\r\n        </button>\r\n        <EditableLabel\r\n          value={this.props.name}\r\n          changeHandler={this.props.changeHandler('name')}\r\n          keyName='name'\r\n          labelName='School Name'\r\n        />\r\n        <EditableLabel\r\n          value={this.props.courseOfStudy}\r\n          changeHandler={this.props.changeHandler('courseOfStudy')}\r\n          keyName='courseOfStudy'\r\n          labelName='Course of Study'\r\n        />\r\n        <EditableLabel\r\n          value={this.props.location}\r\n          changeHandler={this.props.changeHandler('location')}\r\n          keyName='location'\r\n          labelName='Location'\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default School;\r\n","import React, { Component } from 'react';\r\nimport School from './School';\r\n\r\nclass SchoolExperience extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      addNewJob: false,\r\n      name: 'Add School Name Here',\r\n      courseOfStudy: 'Add Course of Study Here',\r\n      location: 'Add Location Here',\r\n      editingJob: false\r\n    };\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n  }\r\n\r\n  changeHandler(key, value) {\r\n    this.setState({ [key]: value }, () => console.log(this.state));\r\n  }\r\n\r\n  deleteFromArray(index) {\r\n    let arrayCopy = [...this.props.experience];\r\n    arrayCopy.splice(index, 1);\r\n    this.props.changeHandler(this.props.arrayName, arrayCopy);\r\n  }\r\n\r\n  showAddExperienceForm() {\r\n    this.setState({ addNewJob: true });\r\n  }\r\n\r\n  addNewJob = () => {\r\n    const { courseOfStudy, name, location } = this.state;\r\n    const newJob = { courseOfStudy, name, location };\r\n    const newArray = [...this.props.experience, newJob];\r\n    this.props.changeHandler(this.props.arrayName, newArray);\r\n    this.setState({ editingJob: false });\r\n  };\r\n\r\n  //for edit put last element into state, delete last element, & then call addNewJob\r\n  editJob = () => {\r\n    const experience = this.props.experience;\r\n    const len = experience.length;\r\n    const { courseOfStudy, name, location } = experience[len - 1];\r\n    this.setState({ courseOfStudy, name, location });\r\n    this.deleteFromArray(len - 1);\r\n    this.setState({ editingJob: true, addNewJob: true });\r\n  };\r\n\r\n  render() {\r\n    const len = this.props.experience.length;\r\n    const experienceArr = [];\r\n    for (let i = 0; i < len; i++) {\r\n      let job = this.props.experience[i];\r\n      if (i === len - 1) {\r\n        experienceArr.push(\r\n          <p key={i}>\r\n            School Name: {job.name}, Course of Study: {job.courseOfStudy},\r\n            Location: {job.location}{' '}\r\n            <button onClick={() => this.editJob()}>Edit</button>\r\n          </p>\r\n        );\r\n      } else {\r\n        experienceArr.push(\r\n          <p key={i}>\r\n            School Name: {job.name}, Course of Study: {job.courseOfStudy},\r\n            Location: {job.location}{' '}\r\n            <button onClick={() => this.deleteFromArray(i)}>Delete</button>\r\n          </p>\r\n        );\r\n      }\r\n    }\r\n\r\n    const experienceType = this.props.experienceType;\r\n    const { name, courseOfStudy, location } = this.state;\r\n    const message = this.state.editingJob\r\n      ? `Edit ${experienceType}`\r\n      : `Add ${experienceType}`;\r\n    return (\r\n      <div>\r\n        <h3>{experienceType} Experience</h3>\r\n        {this.state.addNewJob && (\r\n          <button onClick={() => this.setState({ addNewJob: false })}>\r\n            Show {experienceType}\r\n          </button>\r\n        )}\r\n        {!this.state.addNewJob && (\r\n          <button onClick={() => this.showAddExperienceForm()}>\r\n            Add {experienceType} Experience\r\n          </button>\r\n        )}\r\n        {!this.state.addNewJob && experienceArr}\r\n        {this.state.addNewJob ? (\r\n          <School\r\n            name={name}\r\n            courseOfStudy={courseOfStudy}\r\n            location={location}\r\n            changeHandler={() => this.changeHandler}\r\n            addNewJob={() => this.addNewJob()}\r\n            message={message}\r\n          />\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SchoolExperience;\r\n","import React, { Component } from 'react';\nimport PersonalInfo from './components/PersonalInfo';\nimport WorkExperiences from './components/WorkExperience';\nimport SchoolExperiences from './components/SchoolExperience';\n\nconst appState = {\n  name: 'John Does',\n  city: 'San Francisco',\n  schoolExperience: [\n    {\n      name: 'USC',\n      location: 'Los Angeles',\n      courseOfStudy: 'English'\n    },\n    {\n      name: 'The Odin Project',\n      location: 'Online',\n      courseOfStudy: 'Web development'\n    }\n  ],\n  workExperience: [\n    {\n      companyName: 'Bank',\n      location: 'Los Angeles',\n      title: 'Teller'\n    },\n    {\n      companyName: 'Website Builders',\n      location: 'Long Beach',\n      title: 'Intern'\n    },\n    {\n      companyName: 'Freelance',\n      location: 'Remote',\n      title: 'Software engineer'\n    }\n  ]\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // Bind the this context to the handler function\n    this.changeHandler = this.changeHandler.bind(this);\n\n    // Set some state\n    this.state = {\n      ...appState\n    };\n  }\n\n  // just going to brute force and pass entire object to every child\n  // This method will be sent to the child component\n  changeHandler(key, value) {\n    this.setState({ [key]: value });\n  }\n\n  render() {\n    const { name, city, workExperience, schoolExperience } = this.state;\n    return (\n      <div>\n        <h1>CV Application</h1>\n        <p>{JSON.stringify(this.state)}</p>\n        <PersonalInfo\n          name={name}\n          city={city}\n          changeHandler={this.changeHandler}\n        />\n        <WorkExperiences\n          arrayName='workExperience'\n          experience={workExperience}\n          changeHandler={this.changeHandler}\n          experienceType='Work'\n        />\n        <SchoolExperiences\n          arrayName='schoolExperience'\n          experience={schoolExperience}\n          changeHandler={this.changeHandler}\n          experienceType='School'\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}